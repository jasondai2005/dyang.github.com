---
layout: post
title: 自有产品开发的创新特性
---
h1.  {{ page.title }}

p(meta). 2008-10-05

----
Cruise是我参与过的第一个自有产品开发项目，在这之前的几年里我都一直在做离岸外包。几个月时间下来，对于外包和自有产品开发的差异我着实体会到了不少，而其中最让我印象深刻的就是自有产品开发所具有的强烈的创业感。这集中体现在：

h2. 产品（而不是项目！）成功与否的未知性

对于做产品的团队来说，其所开发的产品往往集中体现了其所在机构的某种商业计划，而且在大多数时间里这种商业计划体现了一种对未来的投资。比如对于 Cruise来说，它体现了ThoughtWorks致力于调整其商业模式和收入模式的一种尝试。ThoughtWorks Studio的成立就是一项目对未来的投资，而Mingle、Cruise、Twist等产品都分别是整个投资计划中的不同环节。假如投资失败（希望不要发生！），那么其影响力不亚于一次创业的失败，因此从这个角度来说，产品开发就是一次创业。

做外包虽然也要交付产品，但是外包提供方和发包商之间的权责是受合同约束的。通常情况下，外包服务提供商只对项目交付负有合同约定的责任，而发包商则要负方向性的责任。也就是说，如果项目失败了，前者失去的是一个客户以及做为服务提供方的信誉，而后者却要对整个产品、项目在整个商业计划中的失利负责。两者之间虽然有不可分割的联系，但其本质却是截然不同的。因此，外包项目的成员往往不会对整个商业链条有完整的理解，其创业感也自然也就不够强烈甚至不存在了。

h2. 创新与生俱来的未知感

创业从本质上来讲是一个构思+执行的过程。而这一点和一个创新型的产品研发过程非常吻合。创新本身所具有的未知性会让所有参与者既激动又不安。这一点在Cruise项目上体现得淋漓尽致。Cruise体现了ThoughtWorks在持续集成和发布管理领域的理念和最佳实践，由于这些理念和最佳实践完全来自ThoughtWorks十几年的实际项目实践，因此没有任何人可以在任何的学术资料里找到参考，而只能依靠群体的智慧一点点沉淀和提炼。

比如说，Cruise 1.0与市场上同类产品最大的区别就在于我们对整个持续集成和发布过程进行了建模，创新性地提出了pipeline的概念。在Cruise之前，市场上的主流同类型产品均是以项目为单位，每一次构建均是对一个项目的构建（编译、测试、打包等），而引入pipeline以后，用户可以根据自己的需要把整个过程进行建模，从而实现从源代码改动到质量保证再到最终部署的全过程自动化。这样最大的好处便是把产品的整个发布周期──从源代码改动到最终的部署──完整并且形象地表现出来，从而让用户在关注细节的同时不失对整个价值链的宏观把握。这一概念在Cruise 1.0推出后获得了用户极大的好评，一些同类产品也开始跟进。可以说，做为一种创新，pipeline取得了应有的成功。然而并不是任何创新都会取得成功，在推出pipeline背后所涉及到的权衡和思考是市场所感受不到的，pipeline成为了Cruise 1.0能否成功的最大赌注。

当然，pipeline并非唯一的创新之处，Cruise中很多细节都包含了我们对持续集成和发布管理的独特思维。在Cruise 1.0发布之后，我们根据市场上用户的反馈，对其中的很多细节进行了调整。然而，做为一项创新型的产品，Cruise并没有把自身定位在仅是满足市场眼前的需求即可。Cruise团队的一项产品设计理念是，永远不要仅仅提供那些最终用户要求的功能，而要留出足够的空间来引入我们的创新。市场是不会对创新提出明确的需求的，这时候就需要产品设计团队能够运用经验和想像力来引领市场了。

两相比较，外包从本质上而言并没有远离创新。我在几年前曾经参与设计过的一个产品还大量地引入了很多有别与行业同类型产品的设计元素。然而，外包本身的合作特点使得不是所有的团队都能自如地设计产品。有很多团队往往被放置在了价值链的最末端──他们只是被当做了装配产品的工匠，而设计往往成为了价值链上游小部分人的专利。在这种合作模式下，创新设计成了外包提供方团队难以奢求的梦想。毕竟还有那么多的东西（了解复杂的业务逻辑、提升性能……）要去考虑，又有多少团队能够有多余的精力去涉足产品设计上的创新呢？

h2. 多角色团队，更高的参与度

Cruise是一个很有趣的项目──我们这些项目成员自己就是产品的最终用户。我们每天都在用Cruise来开发Cruise！在这种情况下，我们每个人都对目标业务领域有很深的认识，而且熟能生巧，我们很容易对产品的功能提出自己的观点。比如说，我们常常需要去了解一个build失败到底是由于功能问题引起的还是受环境影响了，这时我们往往就要重新运行一下整个pipeline（在Cruise 1.0里我们提供了手动运行一个pipeline的功能）。然而，我们的pipeline里包含了多个stage（每一个stage可以被理解为整个发布环节中的一个阶段，一些典型的stage包含dev、ut、ft、UAT、prod等等。），每次重新运行都颇为耗时，因此我们希望能加入一个重新运行 stage的功能。在经过了充分的内部讨论和分析以后，我们决定在1.1版本中加入这个功能。目前，这个功能已经基本开发完成（我很幸运地参与了这个功能的开发，呵呵），很快就会随着1.1版本而发布了。

在这种情况下，每个团队成员往往扮演多个角色──开发人员有时会变成BA（business analyst）或者QA，BA有时会参与开发人员的设计讨论，并为开发人员的建模提出领域上的依据或者意见……团队成员之间非常紧密地彼此协作，我们的目标是设计和开发出一套自己喜爱并且对用户带来价值的产品。在实现这个目标的过程中，角色只会使我们的专业技能更为酣畅淋漓地展示，而丝毫没有带来任何程度上的阻碍。

相比之下，我所参与过的外包项目都或多或少地缺乏这种自由度。由于游戏规则已经在商业合同中做出了明确的约定，开发团队在发包方的整个价值链条里的地位往往是固定而且有限的。信息的不对称使得开发团队无法全面地了解产品的来龙去脉（我参与过的一个项目上，发包商甚至有意在我们和最终用户之间做出信息过滤，开发团队基本无法了解最终用户的真实反馈，更何谈去根据这些反馈做出调整了），而名不正言不顺的道理也使得开发团队无心去做什么“分外之事”，只是集中精力去写代码。在这种情况下，做的越少出错的可能性越小，谁还愿意去多做些什么呢？

以上是我根据过去几年的项目经验总结出的一些感想体会。由于项目的特性往往决定了每个人的看法，因此也许这些感想并不反映二者的本质差异。不过这也并不要紧，因为体验本身就是挺有趣的一个过程。:)

